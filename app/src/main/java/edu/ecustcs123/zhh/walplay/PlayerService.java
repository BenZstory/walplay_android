package edu.ecustcs123.zhh.walplay;import android.annotation.SuppressLint;import android.app.Service;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.media.MediaPlayer;import android.os.IBinder;import android.os.Handler;import android.os.Message;import android.util.Log;import java.io.IOException;import java.lang.reflect.InvocationHandler;import java.util.List;import java.util.logging.LogRecord;import javax.xml.datatype.Duration;/** * Created by BenZ on 2015/12/8. * zhengbin0320@gmail.com */@SuppressLint("NewApi")public class PlayerService extends Service {    private MediaPlayer mediaPlayer;    private String path;        //音乐路径    private int currentTime;    //  当前时间    private int listPos;        //在列表中的位置    private List<Mp3Info> mp3Infos;//音乐列表    private int duration;//音乐长度    private MyReceiver myReceiver;    private int playMode = AppConstant.PlayMode.MODE_ROUND;//播放模式，见appConstant.java    private boolean isPause;    private boolean isProgressChanged = false;    @Override    public IBinder onBind(Intent intent) {        return null;    }    @Override    public void onCreate() {        super.onCreate();        mediaPlayer = new MediaPlayer();        mp3Infos = MusicListUtil.getMp3Infos(this);        mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {            /**             * 当播放完成后如何操作，取决于播放模式Play_mode             */            @Override            public void onCompletion(MediaPlayer mp) {                if(playMode == AppConstant.PlayMode.MODE_REPEAT){                    currentTime = 0;                    mediaPlayer.start();//单曲循环                }else if(playMode == AppConstant.PlayMode.MODE_ROUND){                    //列表循环                    listPos++;                    if(listPos>mp3Infos.size()-1) listPos = 0;                    Intent intent = new Intent();                    intent.setAction(AppConstant.ACTION.UPDATE_ACTION);                    intent.putExtra("listPos", listPos);//更新播放游标                    sendBroadcast(intent);              //广播给PlayerReceiver                    //准备播放                    path = mp3Infos.get(listPos).getUrl();                    currentTime = 0;                    play();                }else if(playMode == AppConstant.PlayMode.MODE_RANDOM){                    listPos = (int) (Math.random()*(mp3Infos.size()-1));                    Intent intent = new Intent();                    intent.setAction(AppConstant.ACTION.UPDATE_ACTION);                    intent.putExtra("listPos", listPos);//更新播放游标                    sendBroadcast(intent);              //广播给PlayerReceiver                    //准备播放                    path = mp3Infos.get(listPos).getUrl();                    currentTime = 0;                    play();                }            }        });        myReceiver = new MyReceiver();        IntentFilter filter = new IntentFilter();        filter.addAction(AppConstant.ACTION.CTL_ACTION);        registerReceiver(myReceiver, filter);    }    /**     * 广播更新播放时间     */    private Handler handler = new Handler() {        @Override        public void handleMessage(Message msg) {            if(msg.what == 1){                if(mediaPlayer != null){                    currentTime = mediaPlayer.getCurrentPosition();                    Intent intent = new Intent();                    intent.setAction(AppConstant.ACTION.MUSIC_CURRENT);                    intent.putExtra("currentTime", currentTime);                    sendBroadcast(intent);                    handler.sendEmptyMessageDelayed(1,1000);                }            }        }    };    @Override    public int onStartCommand(Intent intent, int flags, int startId) {        path = intent.getStringExtra("url");        listPos = intent.getIntExtra("listPos", -1);        int msg = intent.getIntExtra("MSG",0);        if(msg == AppConstant.PlayerMsg.PLAY_MSG ){            this.currentTime = 0;            play();        }else if(msg == AppConstant.PlayerMsg.PAUSE_MSG){            pause();        }else if(msg == AppConstant.PlayerMsg.STOP_MSG){            stop();        }else if(msg == AppConstant.PlayerMsg.CONTINUE_MSG){            resume();        }else if(msg == AppConstant.PlayerMsg.PROGRESS_CHANGE){            this.currentTime = intent.getIntExtra("progress",-1);            Log.d(AppConstant.LOG.LOG_GETPROGRESSCHANGE, String.valueOf(currentTime));            isProgressChanged = true;            if(!isPause){                play();            }        }        return super.onStartCommand(intent, flags, startId);    }    /**     * 播放必不可少的步骤     * position : 音乐流从哪开始     */    private void play(){        try {            Log.d(AppConstant.LOG.LOG_CURRENTTIME+"_p", String.valueOf(currentTime));            isProgressChanged = false;            mediaPlayer.reset();        //重置各项参数            mediaPlayer.setDataSource(path);//获取文件uri            mediaPlayer.prepare();      //缓冲            mediaPlayer.setOnPreparedListener(new PreparedListener(currentTime));//注册监听器            handler.sendEmptyMessage(1);        //开始播放，启动返回播放进度的广播        }catch (Exception e){            e.printStackTrace();        }    }    private void pause(){        if(mediaPlayer != null && mediaPlayer.isPlaying()){            mediaPlayer.pause();            isPause = true;        }    }    private void resume(){        if(isPause){            //要判断是否在暂停的时候拖动过进度条            if(isProgressChanged){                play();            }else{                mediaPlayer.start();                isPause = false;            }        }    }    private void stop(){        if(mediaPlayer != null){            mediaPlayer.stop();            try{                mediaPlayer.prepare();            }catch (Exception e){                e.printStackTrace();            }        }    }    private final class PreparedListener implements MediaPlayer.OnPreparedListener{        private int currentTime;        public PreparedListener(int currentTime){            this.currentTime = currentTime;        }        @Override        public void onPrepared(MediaPlayer mp) {            Log.d(AppConstant.LOG.LOG_CURRENTTIME+"_pre", String.valueOf(currentTime));            Log.d(AppConstant.LOG.LOG_DURATION, String.valueOf(duration));            //传回歌曲长度信息            Intent intent = new Intent();            intent.setAction(AppConstant.ACTION.MUSIC_DURATION);            duration = mediaPlayer.getDuration();            intent.putExtra("duration",duration);            sendBroadcast(intent);            //开始播放            if (currentTime>0){                mediaPlayer.seekTo(currentTime);            }            mediaPlayer.start();        }    }    public class MyReceiver extends BroadcastReceiver{        @Override        public void onReceive(Context context, Intent intent) {            int mode = intent.getIntExtra("playMode",-1);            switch (mode){                case AppConstant.PlayMode.MODE_RANDOM:                    playMode = AppConstant.PlayMode.MODE_RANDOM;                    break;                case AppConstant.PlayMode.MODE_ROUND:                    playMode = AppConstant.PlayMode.MODE_ROUND;                    break;                case AppConstant.PlayMode.MODE_REPEAT:                    playMode = AppConstant.PlayMode.MODE_REPEAT;                    break;            }        }    }}