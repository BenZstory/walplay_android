package edu.ecustcs123.zhh.walplay;import android.content.Context;import android.database.Cursor;import android.provider.MediaStore;import android.widget.SimpleAdapter;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;/** * Created by BenZ on 2015/12/8. * zhengbin0320@gmail.com */public class MusicListUtil {    /**     * @return     */    public static List<Mp3Info> getMp3Infos(Context context) {        Cursor cursor = context.getContentResolver().query(                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, null, null, null,                MediaStore.Audio.Media.DEFAULT_SORT_ORDER        );        List<Mp3Info> mp3Infos = new ArrayList<Mp3Info>();        for (int i = 0; i < cursor.getCount(); i++) {            Mp3Info mp3Info = new Mp3Info();            cursor.moveToNext();            long id = cursor.getLong(cursor.getColumnIndex((MediaStore.Audio.Media._ID)));            String title = cursor.getString(cursor.getColumnIndex((MediaStore.Audio.Media.TITLE)));            String artist = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.ARTIST));            long duration = cursor.getLong(cursor.getColumnIndex(MediaStore.Audio.Media.DURATION));            long size = cursor.getLong(cursor.getColumnIndex(MediaStore.Audio.Media.SIZE));            String url = cursor.getString(cursor.getColumnIndex(MediaStore.Audio.Media.DATA));            int isMusic = cursor.getInt(cursor.getColumnIndex(MediaStore.Audio.Media.IS_MUSIC));            if (isMusic != 0) {                mp3Info.setId(id);                mp3Info.setTitle(title);                mp3Info.setArtist(artist);                mp3Info.setDuration(duration);                mp3Info.setSize(size);                mp3Info.setUrl(url);                mp3Infos.add(mp3Info);            }        }        return mp3Infos;    }    /**     * ����hashmap��list��׼������listview��     * @param mp3Infos     * @return list     */    public static List<HashMap<String, Object>> getMusicMaps(List<Mp3Info> mp3Infos) {        List<HashMap<String, Object>> list = new ArrayList<HashMap<String, Object>>();        //����MP3infos        for (Iterator iterator = mp3Infos.iterator(); iterator.hasNext(); ) {            Mp3Info mp3Info = (Mp3Info) iterator.next();            HashMap<String, Object> map = new HashMap<String, Object>();            map.put("title",mp3Info.getTitle());            map.put("artist",mp3Info.getArtist());            map.put("duration",formatTime(mp3Info.getDuration()));            map.put("btn", R.drawable.glyphicons_18_music);            list.add(map);        }        return list;    }    /**     * @param time     * @return     */    public static String formatTime(long time){        String min = time/(1000*60) + "";        String sec = time%(1000*60) + "";        if (sec.length() == 4) {            sec = "0" + (time % (1000 * 60)) + "";        } else if (sec.length() == 3) {            sec = "00" + (time % (1000 * 60)) + "";        } else if (sec.length() == 2) {            sec = "000" + (time % (1000 * 60)) + "";        } else if (sec.length() == 1) {            sec = "0000" + (time % (1000 * 60)) + "";        }        return min+":"+sec.trim().substring(0,2);    }}