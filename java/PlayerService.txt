package edu.ecustcs123.zhh.walplay;

import android.annotation.SuppressLint;
import android.app.Service;
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.IBinder;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import java.io.IOException;
import java.lang.reflect.InvocationHandler;
import java.util.logging.LogRecord;

import javax.xml.datatype.Duration;

/**
 * Created by BenZ on 2015/12/8.
 * zhengbin0320@gmail.com
 */
@SuppressLint("NewApi")
public class PlayerService extends Service {
    private MediaPlayer mediaPlayer = new MediaPlayer();
    private String path;
    private int currentTime;
    private int position;
    private int duration;
    private boolean isPause;
    private boolean isProgressChanged = false;

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    /**
     * 广播更新播放时间
     */
    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            if(msg.what == 1){
                if(mediaPlayer != null){
                    currentTime = mediaPlayer.getCurrentPosition();
                    Intent intent = new Intent();
                    intent.setAction(AppConstant.ACTION.MUSIC_CURRENT);
                    intent.putExtra("currentTime", currentTime);
                    sendBroadcast(intent);
                    handler.sendEmptyMessageDelayed(1,1000);
                }
            }
        }
    };

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        path = intent.getStringExtra("url");
        int msg = intent.getIntExtra("MSG",0);
        if(msg == AppConstant.PlayerMsg.PLAY_MSG ){
            this.currentTime = 0;
            play();
        }else if(msg == AppConstant.PlayerMsg.PAUSE_MSG){
            pause();
        }else if(msg == AppConstant.PlayerMsg.STOP_MSG){
            stop();
        }else if(msg == AppConstant.PlayerMsg.CONTINUE_MSG){
            resume();
        }else if(msg == AppConstant.PlayerMsg.PROGRESS_CHANGE){
            this.currentTime = intent.getIntExtra("progress",-1);
            Log.d(AppConstant.LOG.LOG_GETPROGRESSCHANGE, String.valueOf(currentTime));
            isProgressChanged = true;
            if(!isPause){
                play();
            }
        }
        return super.onStartCommand(intent, flags, startId);
    }

    /**
     * 播放必不可少的步骤
     * position : 音乐流从哪开始
     */
    private void play(){
        try {
            Log.d(AppConstant.LOG.LOG_CURRENTTIME+"_p", String.valueOf(currentTime));
            isProgressChanged = false;
            mediaPlayer.reset();        //重置各项参数
            mediaPlayer.setDataSource(path);//获取文件uri
            mediaPlayer.prepare();      //缓冲
            mediaPlayer.setOnPreparedListener(new PreparedListener(currentTime));//注册监听器
            handler.sendEmptyMessage(1);        //开始播放，启动返回播放进度的广播
        }catch (Exception e){
            e.printStackTrace();
        }
    }

    private void pause(){
        if(mediaPlayer != null && mediaPlayer.isPlaying()){
            mediaPlayer.pause();
            isPause = true;
        }
    }

    private void resume(){
        if(isPause){
            //要判断是否在暂停的时候拖动过进度条
            if(isProgressChanged){
                play();
            }else{
                mediaPlayer.start();
                isPause = false;
            }
        }
    }

    private void stop(){
        if(mediaPlayer != null){
            mediaPlayer.stop();
            try{
                mediaPlayer.prepare();
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }

    private final class PreparedListener implements MediaPlayer.OnPreparedListener{
        private int currentTime;
        public PreparedListener(int currentTime){
            this.currentTime = currentTime;
        }

        @Override
        public void onPrepared(MediaPlayer mp) {
            Log.d(AppConstant.LOG.LOG_CURRENTTIME+"_pre", String.valueOf(currentTime));
            Log.d(AppConstant.LOG.LOG_DURATION, String.valueOf(duration));
            //传回歌曲长度信息
            Intent intent = new Intent();
            intent.setAction(AppConstant.ACTION.MUSIC_DURATION);
            duration = mediaPlayer.getDuration();
            intent.putExtra("duration",duration);
            sendBroadcast(intent);
            //开始播放
            if (currentTime>0){
                mediaPlayer.seekTo(currentTime);
            }
            mediaPlayer.start();
        }
    }
}


